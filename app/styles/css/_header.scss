@import '../vendor/bourbon/bourbon';
@import 'variables';
@import 'utils';

@mixin header {

  $headerHeight: 4rem;
  $searchInputPadding: 0 3rem 0 .5rem;
  $searchFieldAnimationDuration: $baseTransitionDuration;

  .mt-header {
    position: relative;
    height: $headerHeight;
    width: 100%;
    z-index: 1;
    overflow: hidden; // hide overflowing search field
  }

  //fake background so that we can animate the header background color by using opacity
  .mt-header__bg {
    position: absolute;
    height: 100%;
    width: 100%;

    background-color: $baseBgColor;
    opacity: 0; // animated

    transition: opacity $baseTransitionDuration $ease-in-quart;

    .activity-state & {
      opacity: 1; // animated
    }
  }

  .mt-header__container {
    height: 100%;
    width: 100%;

    // brings the container forward of the background
    position: relative;

    display: flex;
    align-items: center;

    > .start {
      flex: 1;
      overflow: hidden;

      display: flex;
    }
    > .end {
      flex: 1;
    }
  }

  .mt-header__app-title {
    position: relative;
    top: (4rem/16);
    margin-left: .5rem;
    margin-right: 1rem;

    color: $contrastedColor;
    overflow: hidden;

    > .logo {
      font-family: 'Oleo Script Swash Caps', cursive;
      font-size: 2.5rem;
    }

    > .remaining {
      display: none;

      font-size: 1.75rem;

      @include mt-media-large-screen {
        display: inline;
      }
    }
  }

  .mt-header__play-button {
    @extend %mt-chromeless-button;

    height: 3rem;
    width: 3rem;

    color: $contrastedColor;
    border: .125rem solid $contrastedColor;
    border-radius: 50%;
    font-size: 2rem;

    // todo fix those magic numbers
    &:before {
      position: relative;
      left: .1rem;
    }
  }

  // Search input styles
  //
  // We need a little bit of a hack here because:
  //  - we need to focus the input field on user action for mobile browsers to accept the focus action and show the virtual keyboard
  //  - we can't animate and focus an input because it creates glitches (at least in Chrome): the browser will move the
  //    focused input inside the viewport to make it visible
  //  - we want an cross browser way to fix that
  // So:
  //  - we append a transparent (opacity: 0) "real" input next to a "fake" one (basically a div) to a translated container
  //    so that it is outside of the viewport
  //  - on user action we translate the container inside the view, we focus the real input and animate the fake one
  //  - at the end of the fake input animation we make the real one visible (opacity: 1)

  .mt-search-input__button {
    @extend %mt-chromeless-button;
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    padding: 0 .5rem;
    z-index: 1;

    color: $lightTextColor;
    font-size: 2.5rem;

    &.ng-click-active {
      transform: scale(.9);
    }
  }

  // the container, will be translated but not animated
  .mt-search-input {
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    width: 100%;
    max-width: 30rem;
    padding: $searchInputPadding;
    overflow: hidden;

    font-size: 1.5rem;
    color: $lightTextColor;

    display: flex;
    align-items: center;

    &.mt-search-input__animation-toggle {
      // this element is not animated but AngularJS animations need this duration info
      animation-duration: $searchFieldAnimationDuration;
    }

    // don't hide it straight: wait for the end of the animation
    &.mt-search-input__animation-toggle.ng-hide-add, &.mt-search-input__animation-toggle.ng-hide-remove {
      display: block !important;
    }
  }

  // the real input, is made transparent and becomes opaque at the end
  .mt-search-input__field {
    @extend %mt-chromeless-input;
    position: relative;
    height: 100%;
    width: 100%;
    z-index: 1;

    background-color: $secondaryBgColor;
    font: inherit;
    color: inherit;

    // overrides placeholder to be sure that it is coherent with the fake field pseudo placeholder
    &::placeholder {
      @include mt-placeholder;
    }

    // use fake 0s duration transition to actually leverage the delay for opacity change
    // doing that we don't rely on JS animation event handling to show the input at the end of the fake input animation
    transition: opacity 0s;

    .mt-search-input__animation-toggle.ng-hide & {
      opacity: 0; // IE11 won't respect that once the field focused and that will create a flash, not much we can do
    }

    .mt-search-input__animation-toggle.ng-hide-remove & {
      transition-delay: $searchFieldAnimationDuration;
    }

    // remove delay when hiding
    .mt-search-input__animation-toggle.ng-hide-add & {
      transition-delay: 0;
    }
  }

  // the animated fake field gives the illusion that the real input is moving
  .mt-search-input__fake-field {
    @include position(absolute, 0px 0px 0px 0px);

    background-color: $secondaryBgColor;
    transform: translateX(0);

    // for fake placeholder alignment
    display: flex;
    align-items: center; // align-self seems to not work for :before pseudo element in IE11

    // simulates the real input placeholder until the real input is made visible
    &:before {
      content: attr(data-mt-placeholder);
      padding: $searchInputPadding;

      @include mt-placeholder;
    }

    transition: transform $searchFieldAnimationDuration $ease-in-quart;

    .mt-search-input__animation-toggle.ng-hide & {
      transform: translateX(100%);
    }
  }
}